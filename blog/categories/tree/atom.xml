<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tree | Shady Minds]]></title>
  <link href="http://dyagilev.org/blog/categories/tree/atom.xml" rel="self"/>
  <link href="http://dyagilev.org/"/>
  <updated>2015-04-12T23:17:55+03:00</updated>
  <id>http://dyagilev.org/</id>
  <author>
    <name><![CDATA[Oleksiy Dyagilev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fractal Tree Indexes]]></title>
    <link href="http://dyagilev.org/blog/2012/03/29/fractal-tree-indexes/"/>
    <updated>2012-03-29T15:58:13+03:00</updated>
    <id>http://dyagilev.org/blog/2012/03/29/fractal-tree-indexes</id>
    <content type="html"><![CDATA[<p>Парни из <a href="http://www.tokutek.com/">Tokutek</a> реализовали engine <a href="http://en.wikipedia.org/wiki/TokuDB">TokuDB</a> для MySQL как замену InnoDB, улучшив производительность операций вставки, запросов и компрессии. В основе индекса лежит  так называемое Fractal Tree.</p>

<p>Посмотрим за счет чего достигается скорость вставки и поиска по сравнению с классическим B-tree.</p>

<!-- more -->

<h2 id="section">Асимптотическая оценка</h2>

<p>Необходимо оговориться, что мы рассматриваем случай когда индекс хранится на диске, а не в памяти. Поэтому нас интересует оценка количества операций IO, а не операций CPU. Операции CPU занимают ничтожно малое время по сравнению с IO.</p>

<p><strong>Вставка:</strong></p>

<p>B-tree <code>O((log N)/(log B))</code></p>

<p>Fractal-tree <code>O((log N)/(B^(1-k)))</code></p>

<p><strong>Поиск:</strong></p>

<p>B-tree <code>O((log N)/(log B))</code></p>

<p>Fractal-tree <code>O((log N)/(log (k*B^(1-k)))</code></p>

<p>где B - размер IO блока</p>

<p>Итак, упрощенный вариант Fractal Tree:</p>

<ul>
  <li><code>log N</code> массивов размером <code>2^i</code></li>
  <li>каждый массив или полностью пустой или полностью заполнен</li>
  <li>каждый массив отсортирован</li>
</ul>

<p><img src="/images/fractal-tree/fractal_tree1.png" width="50%" height="50%" /></p>

<h3 id="section-1">Вставка</h3>
<p>Начинаем сверху. Смотрим на верхний массив размером 1. Если он пустой - кладем туда элемент. Иначе вынимаем элемент и сортируем с данным во временом массиве. Спускаемся вниз к массиву размером 2. Если он пустой - кладем туда нашу пару. Если нет - мержим их с временным массивом. Так как оба массива отсортированы, то делаем ето за <code>O(X)</code>, где <code>X</code> ето длина массива. По сути ето операция merge из merge-сортировки. 
Амортизированное время вставки занимает <code>O((log N)/B)</code>, хотя в худшем случае вставка одного элемента может повлечь за собой перезапись огромного количества данных по цепочке. Чтобы избежать пиков с длительным ответом TokuDB порождает отдельный поток для вставки, ответ для клиента возвращается немедленно.</p>

<h3 id="section-2">Поиск</h3>
<p>проходимся по массивам, в кажом массиве используем бинарный поиск. Итого - <code>O((log N)^2)</code>. Это медленнее чем B-tree. Как это можно ускорить?</p>

<p>Идея состоит в том, чтобы во время поиска в очередном массиве использовать некоторую информацию из поиска предыдущего массива. И так по цепочке. А информация следующая - каждый элемент массива хранит ссылку на его ‘виртуальное’ место в следующем массиве. Называется ето fractional cascading. 
Итого, <code>log N</code> массивов, константное время на каждом массиве дает <code>O(log N)</code>.</p>

<p><img src="/images/fractal-tree/fractal_tree2.png" width="50%" height="50%" /></p>

<p>В целом товарищи из Tokutek считают что в будущем все перейдут на фрактальные деревья как замена Б-деревьям. Детали алгоритма запатентованы.</p>

<h3 id="section-3">Ссылки</h3>

<ul>
  <li><a href="http://video.mit.edu/watch/lecture-19-how-tokudb-fractal-tree-indexes-work-1361/">презентация в MIT</a></li>
  <li><a href="http://www.mysqlperformanceblog.com/2009/04/28/detailed-review-of-tokutek-storage-engine/">бенчмаркинг InnoDB vs TokuDB</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
